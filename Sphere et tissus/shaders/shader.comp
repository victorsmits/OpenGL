#version 450

layout (local_size_x = 32) in;

struct Vertex {
	vec3 pos;
	vec3 color;
	vec3 normal;
	vec3 tangent;
	vec2 texCoord;
	vec3 speed;
	float movable;
};

layout(std430, binding = 0) buffer vertexBlock {
	Vertex clothVertexData[];
};

struct Constraint {
	int A;
	int B;
	float Len;
};

layout(std430, binding = 1) buffer constraintBlock {
	Constraint constraints[];
};

void main() {
	uint i = gl_GlobalInvocationID.x;
	vec3 g = { 0, 0, -9.81 };
	vec3 center = { 0, 0, 0 };
	float deltaT = 0.01;

	clothVertexData[i].speed += ((deltaT) * g)*clothVertexData[i].movable;
	clothVertexData[i].pos += (deltaT * clothVertexData[i].speed);


	for(int j=0; j<10; j++) {
		for(int k=0; k < 7140 ;k++) {
			Constraint c = constraints[k];
			int A = c.A;
			int B = c.B;
			vec3 unit = (clothVertexData[A].pos-clothVertexData[B].pos) / c.Len;

			clothVertexData[A].pos += (c.Len - length(clothVertexData[A].pos-clothVertexData[B].pos)) * unit * 0.6f * (clothVertexData[A].movable/(clothVertexData[B].movable + clothVertexData[A].movable));
			clothVertexData[B].pos -= (c.Len - length(clothVertexData[A].pos-clothVertexData[B].pos)) * unit * 0.6f * (clothVertexData[B].movable/(clothVertexData[A].movable + clothVertexData[B].movable));
		}
	}

	float Len = length(clothVertexData[i].pos-center);
	if(Len <= 1.0f){
		vec3 unit = (clothVertexData[i].pos-center)/Len;
		clothVertexData[i].pos = unit * 1.0f;
		clothVertexData[i].speed = vec3(0.001);
		clothVertexData[i].movable = 0.1;
	}
	else {
		if (clothVertexData[i].movable < 0.5) {
			clothVertexData[i].movable += 0.1;
		}
		if (clothVertexData[i].movable < 0.8f && clothVertexData[i].movable >= 0.5f) {
			clothVertexData[i].movable += 0.01;
		}
		if (clothVertexData[i].movable < 1 && clothVertexData[i].movable >= 0.8f) {
			clothVertexData[i].movable += 0;
		}
	}
}